services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: autou_postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - autou_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: autou_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - autou_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: autou_backend
    env_file:
      - .env.docker
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autou_network
    volumes:
      - ./back-end/logs:/app/logs
      - upload_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: autou_celery_worker
    command: celery -A app.services.celery worker --loglevel=info --autoscale=10,3 --concurrency=2
    env_file:
      - .env.docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autou_network
    volumes:
      - ./back-end/logs:/app/logs
      - upload_data:/app/data
    healthcheck:
      test: ["CMD", "celery", "-A", "app.services.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    container_name: autou_frontend
    env_file:
      - .env.docker
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - autou_network
    restart: unless-stopped

networks:
  autou_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  upload_data:
